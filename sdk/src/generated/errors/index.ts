/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidEpochDuration: 'Invalid Epoch Duration'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEpochDurationError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidEpochDuration'
  constructor() {
    super('Invalid Epoch Duration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidEpochDurationError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidEpochDurationError())
createErrorFromNameLookup.set(
  'InvalidEpochDuration',
  () => new InvalidEpochDurationError()
)

/**
 * Unauthorized: 'Unauthorized Deployer'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized Deployer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * HostTooLong: 'Host length exceeds limit'
 *
 * @category Errors
 * @category generated
 */
export class HostTooLongError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'HostTooLong'
  constructor() {
    super('Host length exceeds limit')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, HostTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new HostTooLongError())
createErrorFromNameLookup.set('HostTooLong', () => new HostTooLongError())

/**
 * InvalidWitnessClaimCount: 'Invalid Witnes Claim count'
 *
 * @category Errors
 * @category generated
 */
export class InvalidWitnessClaimCountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidWitnessClaimCount'
  constructor() {
    super('Invalid Witnes Claim count')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidWitnessClaimCountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidWitnessClaimCountError())
createErrorFromNameLookup.set(
  'InvalidWitnessClaimCount',
  () => new InvalidWitnessClaimCountError()
)

/**
 * EpochAlreadyExists: 'Epoch already exists'
 *
 * @category Errors
 * @category generated
 */
export class EpochAlreadyExistsError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EpochAlreadyExists'
  constructor() {
    super('Epoch already exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EpochAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new EpochAlreadyExistsError())
createErrorFromNameLookup.set(
  'EpochAlreadyExists',
  () => new EpochAlreadyExistsError()
)

/**
 * MaxEpochLengthReached: 'Max Epochs reached'
 *
 * @category Errors
 * @category generated
 */
export class MaxEpochLengthReachedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MaxEpochLengthReached'
  constructor() {
    super('Max Epochs reached')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxEpochLengthReachedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MaxEpochLengthReachedError())
createErrorFromNameLookup.set(
  'MaxEpochLengthReached',
  () => new MaxEpochLengthReachedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
