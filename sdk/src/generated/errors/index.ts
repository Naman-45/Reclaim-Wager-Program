/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * ChallengeAlreadyJoined: 'The challenge has already been joined.'
 *
 * @category Errors
 * @category generated
 */
export class ChallengeAlreadyJoinedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'ChallengeAlreadyJoined'
  constructor() {
    super('The challenge has already been joined.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ChallengeAlreadyJoinedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new ChallengeAlreadyJoinedError())
createErrorFromNameLookup.set(
  'ChallengeAlreadyJoined',
  () => new ChallengeAlreadyJoinedError()
)

/**
 * CannotJoinYourOwnChallenge: 'You cannot join your own challenge.'
 *
 * @category Errors
 * @category generated
 */
export class CannotJoinYourOwnChallengeError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'CannotJoinYourOwnChallenge'
  constructor() {
    super('You cannot join your own challenge.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotJoinYourOwnChallengeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new CannotJoinYourOwnChallengeError()
)
createErrorFromNameLookup.set(
  'CannotJoinYourOwnChallenge',
  () => new CannotJoinYourOwnChallengeError()
)

/**
 * WagerAlreadySettled: 'The wager has already been settled.'
 *
 * @category Errors
 * @category generated
 */
export class WagerAlreadySettledError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'WagerAlreadySettled'
  constructor() {
    super('The wager has already been settled.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WagerAlreadySettledError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new WagerAlreadySettledError())
createErrorFromNameLookup.set(
  'WagerAlreadySettled',
  () => new WagerAlreadySettledError()
)

/**
 * IncorrectWagerAmount: 'The wager amount is incorrect.'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectWagerAmountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'IncorrectWagerAmount'
  constructor() {
    super('The wager amount is incorrect.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectWagerAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new IncorrectWagerAmountError())
createErrorFromNameLookup.set(
  'IncorrectWagerAmount',
  () => new IncorrectWagerAmountError()
)

/**
 * ThirdPersonWinner: 'Winner is neither creator nor opponent.'
 *
 * @category Errors
 * @category generated
 */
export class ThirdPersonWinnerError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'ThirdPersonWinner'
  constructor() {
    super('Winner is neither creator nor opponent.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ThirdPersonWinnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new ThirdPersonWinnerError())
createErrorFromNameLookup.set(
  'ThirdPersonWinner',
  () => new ThirdPersonWinnerError()
)

/**
 * MissingAccounts: 'Missing accounts in remaining_accounts'
 *
 * @category Errors
 * @category generated
 */
export class MissingAccountsError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MissingAccounts'
  constructor() {
    super('Missing accounts in remaining_accounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MissingAccountsError())
createErrorFromNameLookup.set(
  'MissingAccounts',
  () => new MissingAccountsError()
)

/**
 * WrongOpponent: 'Not the same opponent being passed, while settling'
 *
 * @category Errors
 * @category generated
 */
export class WrongOpponentError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'WrongOpponent'
  constructor() {
    super('Not the same opponent being passed, while settling')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongOpponentError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new WrongOpponentError())
createErrorFromNameLookup.set('WrongOpponent', () => new WrongOpponentError())

/**
 * WrongCreator: 'Not the same creator being passed, while settling'
 *
 * @category Errors
 * @category generated
 */
export class WrongCreatorError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'WrongCreator'
  constructor() {
    super('Not the same creator being passed, while settling')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongCreatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new WrongCreatorError())
createErrorFromNameLookup.set('WrongCreator', () => new WrongCreatorError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
