/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitializeEpochConfigArgs,
  initializeEpochConfigArgsBeet,
} from '../types/InitializeEpochConfigArgs'

/**
 * @category Instructions
 * @category InitializeEpochConfig
 * @category generated
 */
export type InitializeEpochConfigInstructionArgs = {
  args: InitializeEpochConfigArgs
}
/**
 * @category Instructions
 * @category InitializeEpochConfig
 * @category generated
 */
export const initializeEpochConfigStruct = new beet.BeetArgsStruct<
  InitializeEpochConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', initializeEpochConfigArgsBeet],
  ],
  'InitializeEpochConfigInstructionArgs'
)
/**
 * Accounts required by the _initializeEpochConfig_ instruction
 *
 * @property [_writable_] epochConfig
 * @property [**signer**] createKey
 * @property [_writable_, **signer**] deployer
 * @category Instructions
 * @category InitializeEpochConfig
 * @category generated
 */
export type InitializeEpochConfigInstructionAccounts = {
  epochConfig: web3.PublicKey
  createKey: web3.PublicKey
  deployer: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initializeEpochConfigInstructionDiscriminator = [
  224, 171, 134, 64, 85, 90, 160, 246,
]

/**
 * Creates a _InitializeEpochConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeEpochConfig
 * @category generated
 */
export function createInitializeEpochConfigInstruction(
  accounts: InitializeEpochConfigInstructionAccounts,
  args: InitializeEpochConfigInstructionArgs,
  programId = new web3.PublicKey('9Hk1t2edUC4kufMjkid2mt4m29cPwyaPhwNhAfrmEoG7')
) {
  const [data] = initializeEpochConfigStruct.serialize({
    instructionDiscriminator: initializeEpochConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.epochConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.createKey,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.deployer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
