/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateChallenge
 * @category generated
 */
export type CreateChallengeInstructionArgs = {
  challengeId: string
  wagerAmount: beet.bignum
}
/**
 * @category Instructions
 * @category CreateChallenge
 * @category generated
 */
export const createChallengeStruct = new beet.FixableBeetArgsStruct<
  CreateChallengeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['challengeId', beet.utf8String],
    ['wagerAmount', beet.u64],
  ],
  'CreateChallengeInstructionArgs'
)
/**
 * Accounts required by the _createChallenge_ instruction
 *
 * @property [_writable_, **signer**] creator
 * @property [_writable_] challenge
 * @property [] tokenMint
 * @property [_writable_] creatorTokenAccount
 * @property [_writable_] programTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateChallenge
 * @category generated
 */
export type CreateChallengeInstructionAccounts = {
  creator: web3.PublicKey
  challenge: web3.PublicKey
  tokenMint: web3.PublicKey
  creatorTokenAccount: web3.PublicKey
  programTokenAccount: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createChallengeInstructionDiscriminator = [
  170, 244, 47, 1, 1, 15, 173, 239,
]

/**
 * Creates a _CreateChallenge_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateChallenge
 * @category generated
 */
export function createCreateChallengeInstruction(
  accounts: CreateChallengeInstructionAccounts,
  args: CreateChallengeInstructionArgs,
  programId = new web3.PublicKey('CGTjkfCkFqEPhp28aBK6afd2SaqeVTju1pdYZzdrX3dn')
) {
  const [data] = createChallengeStruct.serialize({
    instructionDiscriminator: createChallengeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.challenge,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.programTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
