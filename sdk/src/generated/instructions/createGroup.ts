/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CreateGroupArgs, createGroupArgsBeet } from '../types/CreateGroupArgs'

/**
 * @category Instructions
 * @category CreateGroup
 * @category generated
 */
export type CreateGroupInstructionArgs = {
  args: CreateGroupArgs
}
/**
 * @category Instructions
 * @category CreateGroup
 * @category generated
 */
export const createGroupStruct = new beet.FixableBeetArgsStruct<
  CreateGroupInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createGroupArgsBeet],
  ],
  'CreateGroupInstructionArgs'
)
/**
 * Accounts required by the _createGroup_ instruction
 *
 * @property [_writable_] group
 * @property [_writable_, **signer**] administrator
 * @category Instructions
 * @category CreateGroup
 * @category generated
 */
export type CreateGroupInstructionAccounts = {
  group: web3.PublicKey
  administrator: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createGroupInstructionDiscriminator = [
  79, 60, 158, 134, 61, 199, 56, 248,
]

/**
 * Creates a _CreateGroup_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateGroup
 * @category generated
 */
export function createCreateGroupInstruction(
  accounts: CreateGroupInstructionAccounts,
  args: CreateGroupInstructionArgs,
  programId = new web3.PublicKey('rEcLDWaVLaymz82eGr6cutosPxE6SEzw6q4pbtLuyqf')
) {
  const [data] = createGroupStruct.serialize({
    instructionDiscriminator: createGroupInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.group,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.administrator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
