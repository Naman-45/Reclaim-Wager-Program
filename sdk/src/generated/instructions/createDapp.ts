/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CreateDappArgs, createDappArgsBeet } from '../types/CreateDappArgs'

/**
 * @category Instructions
 * @category CreateDapp
 * @category generated
 */
export type CreateDappInstructionArgs = {
  args: CreateDappArgs
}
/**
 * @category Instructions
 * @category CreateDapp
 * @category generated
 */
export const createDappStruct = new beet.BeetArgsStruct<
  CreateDappInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createDappArgsBeet],
  ],
  'CreateDappInstructionArgs'
)
/**
 * Accounts required by the _createDapp_ instruction
 *
 * @property [_writable_] dapp
 * @property [] group
 * @property [**signer**] createKey
 * @property [_writable_, **signer**] creator
 * @category Instructions
 * @category CreateDapp
 * @category generated
 */
export type CreateDappInstructionAccounts = {
  dapp: web3.PublicKey
  group: web3.PublicKey
  createKey: web3.PublicKey
  creator: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createDappInstructionDiscriminator = [
  230, 26, 137, 31, 106, 149, 11, 131,
]

/**
 * Creates a _CreateDapp_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateDapp
 * @category generated
 */
export function createCreateDappInstruction(
  accounts: CreateDappInstructionAccounts,
  args: CreateDappInstructionArgs,
  programId = new web3.PublicKey('CGTjkfCkFqEPhp28aBK6afd2SaqeVTju1pdYZzdrX3dn')
) {
  const [data] = createDappStruct.serialize({
    instructionDiscriminator: createDappInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.dapp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.group,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.createKey,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
