/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Witness, witnessBeet } from '../types/Witness'

/**
 * Arguments used to create {@link Epoch}
 * @category Accounts
 * @category generated
 */
export type EpochArgs = {
  bump: number
  epochConfig: web3.PublicKey
  index: number
  createdAt: beet.bignum
  expiredAt: beet.bignum
  minimumWitnessesForClaim: number
  witnesses: Witness[]
}

export const epochDiscriminator = [93, 83, 120, 89, 151, 138, 152, 108]
/**
 * Holds the data for the {@link Epoch} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Epoch implements EpochArgs {
  private constructor(
    readonly bump: number,
    readonly epochConfig: web3.PublicKey,
    readonly index: number,
    readonly createdAt: beet.bignum,
    readonly expiredAt: beet.bignum,
    readonly minimumWitnessesForClaim: number,
    readonly witnesses: Witness[]
  ) {}

  /**
   * Creates a {@link Epoch} instance from the provided args.
   */
  static fromArgs(args: EpochArgs) {
    return new Epoch(
      args.bump,
      args.epochConfig,
      args.index,
      args.createdAt,
      args.expiredAt,
      args.minimumWitnessesForClaim,
      args.witnesses
    )
  }

  /**
   * Deserializes the {@link Epoch} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Epoch, number] {
    return Epoch.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Epoch} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Epoch> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Epoch account at ${address}`)
    }
    return Epoch.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '9Hk1t2edUC4kufMjkid2mt4m29cPwyaPhwNhAfrmEoG7'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, epochBeet)
  }

  /**
   * Deserializes the {@link Epoch} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Epoch, number] {
    return epochBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Epoch} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return epochBeet.serialize({
      accountDiscriminator: epochDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Epoch} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: EpochArgs) {
    const instance = Epoch.fromArgs(args)
    return epochBeet.toFixedFromValue({
      accountDiscriminator: epochDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Epoch} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: EpochArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Epoch.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Epoch} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      epochConfig: this.epochConfig.toBase58(),
      index: this.index,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      expiredAt: (() => {
        const x = <{ toNumber: () => number }>this.expiredAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minimumWitnessesForClaim: this.minimumWitnessesForClaim,
      witnesses: this.witnesses,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const epochBeet = new beet.FixableBeetStruct<
  Epoch,
  EpochArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['epochConfig', beetSolana.publicKey],
    ['index', beet.u32],
    ['createdAt', beet.i64],
    ['expiredAt', beet.i64],
    ['minimumWitnessesForClaim', beet.u8],
    ['witnesses', beet.array(witnessBeet)],
  ],
  Epoch.fromArgs,
  'Epoch'
)
